// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Dictionaries
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Models;

    /// <summary>
    /// Extension methods for DictionaryOperations.
    /// </summary>
    public static partial class DictionaryOperationsExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='dictionaryName'>
            /// </param>
            public static IList<Dictionary> GetDictionaryByName(this IDictionaryOperations operations, string dictionaryName)
            {
                return Task.Factory.StartNew(s => ((IDictionaryOperations)s).GetDictionaryByNameAsync(dictionaryName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='dictionaryName'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Dictionary>> GetDictionaryByNameAsync(this IDictionaryOperations operations, string dictionaryName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDictionaryByNameWithHttpMessagesAsync(dictionaryName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='dictionaryName'>
            /// </param>
            /// <param name='version'>
            /// </param>
            public static Dictionary GetDictionaryByNameAndVersion(this IDictionaryOperations operations, string dictionaryName, string version)
            {
                return Task.Factory.StartNew(s => ((IDictionaryOperations)s).GetDictionaryByNameAndVersionAsync(dictionaryName, version), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='dictionaryName'>
            /// </param>
            /// <param name='version'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Dictionary> GetDictionaryByNameAndVersionAsync(this IDictionaryOperations operations, string dictionaryName, string version, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDictionaryByNameAndVersionWithHttpMessagesAsync(dictionaryName, version, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='dictionaryName'>
            /// </param>
            /// <param name='version'>
            /// </param>
            /// <param name='dictionary'>
            /// </param>
            public static Dictionary PutDictionary(this IDictionaryOperations operations, string dictionaryName, string version, Dictionary dictionary)
            {
                return Task.Factory.StartNew(s => ((IDictionaryOperations)s).PutDictionaryAsync(dictionaryName, version, dictionary), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='dictionaryName'>
            /// </param>
            /// <param name='version'>
            /// </param>
            /// <param name='dictionary'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Dictionary> PutDictionaryAsync(this IDictionaryOperations operations, string dictionaryName, string version, Dictionary dictionary, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PutDictionaryWithHttpMessagesAsync(dictionaryName, version, dictionary, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete Dictionary
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='dictionaryName'>
            /// </param>
            /// <param name='version'>
            /// </param>
            public static bool? DeleteDictionary(this IDictionaryOperations operations, string dictionaryName, string version)
            {
                return Task.Factory.StartNew(s => ((IDictionaryOperations)s).DeleteDictionaryAsync(dictionaryName, version), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete Dictionary
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='dictionaryName'>
            /// </param>
            /// <param name='version'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<bool?> DeleteDictionaryAsync(this IDictionaryOperations operations, string dictionaryName, string version, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteDictionaryWithHttpMessagesAsync(dictionaryName, version, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='dictionaryName'>
            /// </param>
            /// <param name='version'>
            /// </param>
            /// <param name='id'>
            /// </param>
            public static Item GetDictionaryItemById(this IDictionaryOperations operations, string dictionaryName, string version, string id)
            {
                return Task.Factory.StartNew(s => ((IDictionaryOperations)s).GetDictionaryItemByIdAsync(dictionaryName, version, id), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='dictionaryName'>
            /// </param>
            /// <param name='version'>
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Item> GetDictionaryItemByIdAsync(this IDictionaryOperations operations, string dictionaryName, string version, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDictionaryItemByIdWithHttpMessagesAsync(dictionaryName, version, id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='dictionary'>
            /// </param>
            public static Dictionary CreateDictionary(this IDictionaryOperations operations, Dictionary dictionary)
            {
                return Task.Factory.StartNew(s => ((IDictionaryOperations)s).CreateDictionaryAsync(dictionary), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='dictionary'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Dictionary> CreateDictionaryAsync(this IDictionaryOperations operations, Dictionary dictionary, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateDictionaryWithHttpMessagesAsync(dictionary, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='dictionaryName'>
            /// </param>
            /// <param name='version'>
            /// </param>
            /// <param name='value'>
            /// </param>
            public static Item PostItem(this IDictionaryOperations operations, string dictionaryName, string version, object value)
            {
                return Task.Factory.StartNew(s => ((IDictionaryOperations)s).PostItemAsync(dictionaryName, version, value), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='dictionaryName'>
            /// </param>
            /// <param name='version'>
            /// </param>
            /// <param name='value'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Item> PostItemAsync(this IDictionaryOperations operations, string dictionaryName, string version, object value, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PostItemWithHttpMessagesAsync(dictionaryName, version, value, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='dictionaryName'>
            /// </param>
            /// <param name='version'>
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='item'>
            /// </param>
            public static Item ChangeItem(this IDictionaryOperations operations, string dictionaryName, string version, string id, object item)
            {
                return Task.Factory.StartNew(s => ((IDictionaryOperations)s).ChangeItemAsync(dictionaryName, version, id, item), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='dictionaryName'>
            /// </param>
            /// <param name='version'>
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='item'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Item> ChangeItemAsync(this IDictionaryOperations operations, string dictionaryName, string version, string id, object item, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ChangeItemWithHttpMessagesAsync(dictionaryName, version, id, item, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='dictionaryName'>
            /// </param>
            /// <param name='version'>
            /// </param>
            /// <param name='id'>
            /// </param>
            public static bool? DeleteDictionaryItem(this IDictionaryOperations operations, string dictionaryName, string version, string id)
            {
                return Task.Factory.StartNew(s => ((IDictionaryOperations)s).DeleteDictionaryItemAsync(dictionaryName, version, id), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='dictionaryName'>
            /// </param>
            /// <param name='version'>
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<bool?> DeleteDictionaryItemAsync(this IDictionaryOperations operations, string dictionaryName, string version, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteDictionaryItemWithHttpMessagesAsync(dictionaryName, version, id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
